[{"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/index.js":"1","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/App.js":"2","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/reportWebVitals.js":"3","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/request.js":"4","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Row.js":"5","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/axios.js":"6","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Banner.js":"7","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Nav.js":"8","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Footer.js":"9"},{"size":500,"mtime":1612281641751,"results":"10","hashOfConfig":"11"},{"size":976,"mtime":1612388478450,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1612281641754,"results":"13","hashOfConfig":"11"},{"size":700,"mtime":1612302423656,"results":"14","hashOfConfig":"11"},{"size":1645,"mtime":1612385698323,"results":"15","hashOfConfig":"11"},{"size":134,"mtime":1612284026447,"results":"16","hashOfConfig":"11"},{"size":1954,"mtime":1612383435711,"results":"17","hashOfConfig":"11"},{"size":952,"mtime":1612377760354,"results":"18","hashOfConfig":"11"},{"size":1206,"mtime":1612390985442,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"17ahlr7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/index.js",[],["40","41"],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/App.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/reportWebVitals.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/request.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Row.js",["42"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport  './Row.css';\nimport YouTube from 'react-youtube'\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n  \n    // Options for react-youtube\n    const opts = {\n      height: \"390\",\n      width: \"100%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    };\n  \n    useEffect(() => {\n      async function fetchData() {\n        const request = await axios.get(fetchUrl);\n        setMovies(request.data.results);\n        return request;\n      }\n      fetchData();\n    }, [fetchUrl]);\n  \n    const handleClick = async (movie) => {\n      if (trailerUrl) {\n        setTrailerUrl('');\n      } else {\n        let trailerurl = await axios.get(\n          `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n        );\n      \n        setTrailerUrl(trailerurl.data.results[0]?.key);\n      }\n    };\n  \n\n//   console.table(movies);\n  return (\n    <div className=\"row\">\n      <h1>{title}</h1>\n        \n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img key ={movie.id}\n            onClick={() => handleClick(movie)}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.name} className = {isLargeRow ? `row_poster` : `row_poster_small`}/>\n        ))}\n      </div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/axios.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Banner.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Nav.js",[],"/Users/bothwellsithole/Desktop/Netflix/netflix-clone/src/Footer.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":20},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'movieTrailer' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]